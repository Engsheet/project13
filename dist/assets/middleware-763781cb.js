const T=new Map,y=d=>{const l=T.get(d);return l?Object.fromEntries(Object.entries(l.stores).map(([s,a])=>[s,a.getState()])):{}},b=(d,l,s)=>{if(d===void 0)return{type:"untracked",connection:l.connect(s)};const a=T.get(s.name);if(a)return{type:"tracked",store:d,...a};const o={connection:l.connect(s),stores:{}};return T.set(s.name,o),{type:"tracked",store:d,...o}},m=(d,l={})=>(s,a,o)=>{const{enabled:O,anonymousActionType:R,store:i,...f}=l;let _;try{_=(O??!1)&&window.__REDUX_DEVTOOLS_EXTENSION__}catch{}if(!_)return d(s,a,o);const{connection:t,...v}=b(i,_,f);let p=!0;o.setState=(n,c,e)=>{const r=s(n,c);if(!p)return r;const h=e===void 0?{type:R||"anonymous"}:typeof e=="string"?{type:e}:e;return i===void 0?(t==null||t.send(h,a()),r):(t==null||t.send({...h,type:`${i}/${h.type}`},{...y(f.name),[i]:o.getState()}),r)};const u=(...n)=>{const c=p;p=!1,s(...n),p=c},S=d(o.setState,a,o);if(v.type==="untracked"?t==null||t.init(S):(v.stores[v.store]=o,t==null||t.init(Object.fromEntries(Object.entries(v.stores).map(([n,c])=>[n,n===v.store?S:c.getState()])))),o.dispatchFromDevtools&&typeof o.dispatch=="function"){let n=!1;const c=o.dispatch;o.dispatch=(...e)=>{c(...e)}}return t.subscribe(n=>{var c;switch(n.type){case"ACTION":if(typeof n.payload!="string"){console.error("[zustand devtools middleware] Unsupported action format");return}return E(n.payload,e=>{if(e.type==="__setState"){if(i===void 0){u(e.state);return}Object.keys(e.state).length!==1&&console.error(`
                    [zustand devtools middleware] Unsupported __setState action format. 
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `);const r=e.state[i];if(r==null)return;JSON.stringify(o.getState())!==JSON.stringify(r)&&u(r);return}o.dispatchFromDevtools&&typeof o.dispatch=="function"&&o.dispatch(e)});case"DISPATCH":switch(n.payload.type){case"RESET":return u(S),i===void 0?t==null?void 0:t.init(o.getState()):t==null?void 0:t.init(y(f.name));case"COMMIT":if(i===void 0){t==null||t.init(o.getState());return}return t==null?void 0:t.init(y(f.name));case"ROLLBACK":return E(n.state,e=>{if(i===void 0){u(e),t==null||t.init(o.getState());return}u(e[i]),t==null||t.init(y(f.name))});case"JUMP_TO_STATE":case"JUMP_TO_ACTION":return E(n.state,e=>{if(i===void 0){u(e);return}JSON.stringify(o.getState())!==JSON.stringify(e[i])&&u(e[i])});case"IMPORT_STATE":{const{nextLiftedState:e}=n.payload,r=(c=e.computedStates.slice(-1)[0])==null?void 0:c.state;if(!r)return;u(i===void 0?r:r[i]),t==null||t.send(null,e);return}case"PAUSE_RECORDING":return p=!p}return}}),S},I=m,E=(d,l)=>{let s;try{s=JSON.parse(d)}catch(a){console.error("[zustand devtools middleware] Could not parse the received json",a)}s!==void 0&&l(s)};export{I as d};
